(ns cookoo.code.schema)

#_(defn code-schema []
  (class! :Expr "Expression")
  (class! :Has-exprs "Has expressions" [] [:exprs])
  (class! :Host-expr "Host Expression" [:Expr] [:host])
  (class! :Comp-expr "Composed Expression" :Expr)
  (class! :Vec  "Vector" [:Comp-expr :Has-exprs])
  (class! :Set  "Set" [:Comp-expr :Has-exprs])
  (class! :Mapping "Mapping" [] [:map-key :map-val])
  (class! :Map "Map" :Comp-expr [:mappings])
  (class! :Call "Call" [:Comp-expr :Has-exprs] [:op])
  (class! :Var "Variable" [:Named :Expr])
  (class! :Local "Local Variable" :Var)
  (class! :Global "Global Variable" :Var)
  (class! :Binding "Binding" [] [:lhs :rhs])
  (class! :Has-bindings "Has bindings" [] [:bindings])
  (class! :Let "Let" [:Expr :Has-bindings :Has-exprs])
  (class! :Toplevel "Toplevel Form")
  (class! :Gets-Args "Gets Arguments" [] [:args])
  (class! :Fn "Function definition" [:Toplevel :Named :Expr :Has-exprs :Gets-args])
  (class! :Mac "Macro definition" [:Toplevel :Named :Has-exprs :Gets-args])
  (class! :Def "Global Variable Definition" :Toplevel [:binding])
  (class! :Ns "Namespace" [:Named] [:toplevel])

  (attr! :host "host value" :Host)
  (attr! :op "operator" :Expr)
  (attr! :exprs "expressions" :Expr :card :List)
  (attr! :args "arguments" :Local :card :List)
  (attr! :map-key "mapping key" :Expr)
  (attr! :map-val "mapping value" :Expr)
  (attr! :mappings "mappings" :Mapping :card :List)
  (attr! :toplevel "toplevel items" :Toplevel :card :Set)
  (attr! :lhs "left-handed side" :Var)
  (attr! :rhs "right-handed side" :Expr)
  (attr! :binding "binding" :Binding)
  (attr! :bindings "bindings" :Binding :card :List)  

  )
